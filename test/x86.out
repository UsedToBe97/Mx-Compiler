global main

section .data

section .text
main:
	push	rbp
	mov		rbp, rsp
	sub		rsp, 112
	mov		rax, 5
	mov		qword [rbp - 8], rax
	mov		rax, 0
	mov		qword [rbp - 16], rax
	mov		rcx, qword [rbp - 16]
	cmp		rcx, 0
	setne	cl
	movzx	rcx, cl
	mov		qword [rbp - 40], rcx
	mov		rax, qword [rbp - 40]
	cmp		rax, 1
	je		_1_Label
	mov		rax, 0
	mov		qword [rbp - 32], rax
	jmp		_2_Label
_1_Label:
	mov		rax, qword [rbp - 8]
	mov		rcx, qword [rbp - 16]
	cqo
	idiv	ecx
	mov		qword [rbp - 56], rax
	mov		rcx, qword [rbp - 56]
	cmp		rcx, 1
	setne	cl
	movzx	rcx, cl
	mov		qword [rbp - 48], rcx
	mov		rax, qword [rbp - 48]
	mov		qword [rbp - 32], rax
_2_Label:
	mov		rax, qword [rbp - 32]
	cmp		rax, 1
	je		_3_Label
	jmp		_4_Label
_3_Label:
	mov		rax, 10
	mov		qword [rbp - 24], rax
	jmp		_5_Label
_4_Label:
	mov		rax, 20
	mov		qword [rbp - 24], rax
_5_Label:
	mov		rcx, qword [rbp - 24]
	cmp		rcx, 10
	sete	cl
	movzx	rcx, cl
	mov		qword [rbp - 80], rcx
	mov		rax, qword [rbp - 80]
	cmp		rax, 1
	je		_6_Label
	mov		rax, 0
	mov		qword [rbp - 72], rax
	jmp		_7_Label
_6_Label:
	mov		rax, qword [rbp - 8]
	mov		rcx, qword [rbp - 16]
	cqo
	idiv	ecx
	mov		qword [rbp - 96], rax
	mov		rcx, qword [rbp - 96]
	cmp		rcx, 0
	sete	cl
	movzx	rcx, cl
	mov		qword [rbp - 88], rcx
	mov		rax, qword [rbp - 88]
	mov		qword [rbp - 72], rax
_7_Label:
	mov		rax, qword [rbp - 72]
	cmp		rax, 1
	je		_8_Label
	mov		rax, 0
	mov		qword [rbp - 64], rax
	jmp		_9_Label
_8_Label:
	mov		rcx, qword [rbp - 8]
	cmp		rcx, 5
	sete	cl
	movzx	rcx, cl
	mov		qword [rbp - 104], rcx
	mov		rax, qword [rbp - 104]
	mov		qword [rbp - 64], rax
_9_Label:
	mov		rax, qword [rbp - 64]
	mov		qword [rbp - 112], rax
	mov		rax ,qword [rbp - 112]
	xor		rax, 1
	mov		qword [rbp - 112], rax
	mov		rax, qword [rbp - 112]
	cmp		rax, 1
	je		_10_Label
	jmp		_11_Label
_10_Label:
	mov		rax, 30
	mov		qword [rbp - 24], rax
	jmp		_12_Label
_11_Label:
_12_Label:
	mov		rax, qword [rbp - 24]
	jmp		_0_Label
_0_Label:
	add		rsp, 112
	mov		rsp, rbp
	pop		rbp
	ret	


;thanks for XZYY's inner-built function assembly code

section .data
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%lld ",10,0
format3:
	db"%s",0
format4:
	db"%s",10,0

section .bss
stringbuffer:
	resb 256

extern scanf
extern printf
extern puts
extern strlen
extern memcpy
extern sscanf
extern sprintf
extern malloc
extern strcmp

section .text
getInt:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret

printInt:
	push rbp
	mov rbp,rsp
	mov rsi,rdi
	mov rax,0
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret

Array_size:
	mov rax,[rdi-8]
	ret

print:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rsi,rdi
	mov rdi,format3
	call printf
	mov rsp,rbp
	pop rbp
	ret

println:

	call puts
	ret


transtring:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format3
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

toString:

	push rbp
	mov rbp,rsp
	mov rdx,rdi
	mov rax,0
	mov rdi,stringbuffer
	mov rsi,format1
	call sprintf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

String_length:

	mov rax,[rdi-8]
	ret

String_substring:

	push rbp
	mov rbp,rsp
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

String_parseInt:

	mov rsi,format1
	mov rdx,intbuffer
	mov rax,0
	call sscanf
	mov rax,[intbuffer]
	ret

String_ord:

	mov rax,0
	mov al,byte[rdi+rsi]
	ret

String_add:

	push rbp
	mov rbp,rsp
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

String_lt:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setl dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_le:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setle dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_gt:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setg dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_ge:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setge dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_eq:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	sete dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_ne:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setne dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret