asciiTable__ [GV]
MAXCHUNK__ [GV]
MAXLENGTH__ [GV]
chunks__ [GV]
inputBuffer__ [GV]
outputBuffer__ [GV]

string[ 0 ] 
string[ 1 ] 
string[ 2 ] nChunk > MAXCHUNK!
string[ 3 ] 
string[ 4 ] Invalid input
string[ 5 ] 
string[ 6 ] Not Found!
string[ 7 ]  !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

hex2int [Func]:
	r16 = rdi
	r18 = 0
	r17 = 0
Label_4:
		rdi = r16
		FuncCall string.length Param_size : 1
		r20 = rax
	r19 = r17 < r20
	jump Label_3 if r19 je 1
	jump Label_2
Label_3:
		rdi = r16
		rsi = r17
		FuncCall string.ord Param_size : 2
		r21 = rax
	r22 = r21
	r24 = r22 >= 48
	jump Label_8 if r24 je 1
	r23 = 0
	jump Label_9
Label_8:
	r25 = r22 <= 57
	r23 = r25
Label_9:
	jump Label_6 if r23 je 1
	jump Label_7
Label_6:
	r28 = r18 * 16
	r27 = r28 + r22
	r26 = r27 - 48
	r18 = r26
	jump Label_5
Label_7:
	r30 = r22 >= 65
	jump Label_12 if r30 je 1
	r29 = 0
	jump Label_13
Label_12:
	r31 = r22 <= 70
	r29 = r31
Label_13:
	jump Label_10 if r29 je 1
	jump Label_11
Label_10:
	r35 = r18 * 16
	r34 = r35 + r22
	r33 = r34 - 65
	r32 = r33 + 10
	r18 = r32
	jump Label_5
Label_11:
	r37 = r22 >= 97
	jump Label_16 if r37 je 1
	r36 = 0
	jump Label_17
Label_16:
	r38 = r22 <= 102
	r36 = r38
Label_17:
	jump Label_14 if r36 je 1
	jump Label_15
Label_14:
	r42 = r18 * 16
	r41 = r42 + r22
	r40 = r41 - 97
	r39 = r40 + 10
	r18 = r39
	jump Label_5
Label_15:
	rax = 0
	jump Label_0
Label_5:
Label_1:
	r43 = r17
	r17 = r17 + 1
	jump Label_4
Label_2:
	rax = r18
	jump Label_0
Label_0:
int2chr [Func]:
	r16 = rdi
	r18 = r16 >= 32
	jump Label_22 if r18 je 1
	r17 = 0
	jump Label_23
Label_22:
	r19 = r16 <= 126
	r17 = r19
Label_23:
	jump Label_20 if r17 je 1
	jump Label_21
Label_20:
	r20 = r16 - 32
	r21 = r16 - 32
		rdi = qword [ asciiTable__ ]
		rsi = r20
		rdx = r21
		FuncCall string.substring Param_size : 3
		r22 = rax
	rax = r22
	jump Label_18
	jump Label_19
Label_21:
Label_19:
	rax = str__0
	jump Label_18
Label_18:
toStringHex [Func]:
	r16 = rdi
	r17 = str__1
	r18 = 28
Label_28:
	r19 = r18 >= 0
	jump Label_27 if r19 je 1
	jump Label_26
Label_27:
	r21 = r16 >> r18
	r20 = r21 & 15
	r22 = r20
	r23 = r22 < 10
	jump Label_30 if r23 je 1
	jump Label_31
Label_30:
	r26 = 48 + r22
		rdi = r26
		FuncCall int2chr Param_size : 1
		r27 = rax
		rdi = r17
		rsi = r27
		FuncCall string.add Param_size : 2
		r25 = rax
	r17 = r25
	jump Label_29
Label_31:
	r31 = 65 + r22
	r30 = r31 - 10
		rdi = r30
		FuncCall int2chr Param_size : 1
		r32 = rax
		rdi = r17
		rsi = r32
		FuncCall string.add Param_size : 2
		r29 = rax
	r17 = r29
Label_29:
Label_25:
	r33 = r18 - 4
	r18 = r33
	jump Label_28
Label_26:
	rax = r17
	jump Label_24
Label_24:
rotate_left [Func]:
	r16 = rdi
	r17 = rsi
	r18 = r17 == 1
	jump Label_34 if r18 je 1
	jump Label_35
Label_34:
	r21 = r16 & 2147483647
	r20 = r21 << 1
	r23 = r16 >> 31
	r22 = r23 & 1
	r19 = r20 | r22
	rax = r19
	jump Label_32
	jump Label_33
Label_35:
Label_33:
	r24 = r17 == 31
	jump Label_37 if r24 je 1
	jump Label_38
Label_37:
	r27 = r16 & 1
	r26 = r27 << 31
	r29 = r16 >> 1
	r28 = r29 & 2147483647
	r25 = r26 | r28
	rax = r25
	jump Label_32
	jump Label_36
Label_38:
Label_36:
	r35 = 32 - r17
	r34 = 1 << r35
	r33 = r34 - 1
	r32 = r16 & r33
	r31 = r32 << r17
	r38 = 32 - r17
	r37 = r16 >> r38
	r40 = 1 << r17
	r39 = r40 - 1
	r36 = r37 & r39
	r30 = r31 | r36
	rax = r30
	jump Label_32
Label_32:
add [Func]:
	r16 = rdi
	r17 = rsi
	r19 = r16 & 65535
	r20 = r17 & 65535
	r18 = r19 + r20
	r21 = r18
	r26 = r16 >> 16
	r25 = r26 & 65535
	r28 = r17 >> 16
	r27 = r28 & 65535
	r24 = r25 + r27
	r29 = r21 >> 16
	r23 = r24 + r29
	r22 = r23 & 65535
	r30 = r22
	r32 = r30 << 16
	r33 = r21 & 65535
	r31 = r32 | r33
	rax = r31
	jump Label_39
Label_39:
lohi [Func]:
	r16 = rdi
	r17 = rsi
	r19 = r17 << 16
	r18 = r16 | r19
	rax = r18
	jump Label_40
Label_40:
sha1 [Func]:
	r16 = rdi
	r17 = rsi
	r21 = r17 + 64
	r20 = r21 - 56
	r19 = r20 / 64
	r18 = r19 + 1
	r22 = r18
	r23 = r22 > qword [ MAXCHUNK__ ]
	jump Label_43 if r23 je 1
	jump Label_44
Label_43:
		rdi = str__2
		FuncCall println Param_size : 1
		r24 = rax
	rax = 0
	jump Label_41
	jump Label_42
Label_44:
Label_42:
	r25 = 0
Label_48:
	r27 = r25 < r22
	jump Label_47 if r27 je 1
	jump Label_46
Label_47:
	r26 = 0
Label_52:
	r28 = r26 < 80
	jump Label_51 if r28 je 1
	jump Label_50
Label_51:
	r29 = qword [ chunks__ ]
	r30 = qword [r29 + r25 * 8]
	qword [r30 + r26 * 8] = 0
Label_49:
	r31 = r26
	r26 = r26 + 1
	jump Label_52
Label_50:
Label_45:
	r32 = r25
	r25 = r25 + 1
	jump Label_48
Label_46:
	r25 = 0
Label_56:
	r33 = r25 < r17
	jump Label_55 if r33 je 1
	jump Label_54
Label_55:
	r34 = qword [ chunks__ ]
	r35 = r25 / 64
	r36 = qword [r34 + r35 * 8]
	r38 = r25 % 64
	r37 = r38 / 4
	r40 = qword [ chunks__ ]
	r41 = r25 / 64
	r42 = qword [r40 + r41 * 8]
	r44 = r25 % 64
	r43 = r44 / 4
	r48 = r25 % 4
	r47 = 3 - r48
	r46 = r47 * 8
	r45 = qword [r16 + r25 * 8] << r46
	r39 = qword [r42 + r43 * 8] | r45
	qword [r36 + r37 * 8] = r39
Label_53:
	r49 = r25
	r25 = r25 + 1
	jump Label_56
Label_54:
	r50 = qword [ chunks__ ]
	r51 = r25 / 64
	r52 = qword [r50 + r51 * 8]
	r54 = r25 % 64
	r53 = r54 / 4
	r56 = qword [ chunks__ ]
	r57 = r25 / 64
	r58 = qword [r56 + r57 * 8]
	r60 = r25 % 64
	r59 = r60 / 4
	r64 = r25 % 4
	r63 = 3 - r64
	r62 = r63 * 8
	r61 = 128 << r62
	r55 = qword [r58 + r59 * 8] | r61
	qword [r52 + r53 * 8] = r55
	r65 = qword [ chunks__ ]
	r66 = r22 - 1
	r67 = qword [r65 + r66 * 8]
	r68 = 15
	r69 = r17 << 3
	qword [r67 + r68 * 8] = r69
	r70 = qword [ chunks__ ]
	r71 = r22 - 1
	r72 = qword [r70 + r71 * 8]
	r73 = 14
	r75 = r17 >> 29
	r74 = r75 & 7
	qword [r72 + r73 * 8] = r74
	r76 = 1732584193
		rdi = 43913
		rsi = 61389
		FuncCall lohi Param_size : 2
		r77 = rax
	r78 = r77
		rdi = 56574
		rsi = 39098
		FuncCall lohi Param_size : 2
		r79 = rax
	r80 = r79
	r81 = 271733878
		rdi = 57840
		rsi = 50130
		FuncCall lohi Param_size : 2
		r82 = rax
	r83 = r82
	r25 = 0
Label_60:
	r84 = r25 < r22
	jump Label_59 if r84 je 1
	jump Label_58
Label_59:
	r26 = 16
Label_64:
	r85 = r26 < 80
	jump Label_63 if r85 je 1
	jump Label_62
Label_63:
	r86 = qword [ chunks__ ]
	r87 = qword [r86 + r25 * 8]
	r91 = qword [ chunks__ ]
	r92 = qword [r91 + r25 * 8]
	r93 = r26 - 3
	r94 = qword [ chunks__ ]
	r95 = qword [r94 + r25 * 8]
	r96 = r26 - 8
	r90 = qword [r92 + r93 * 8] ^ qword [r95 + r96 * 8]
	r97 = qword [ chunks__ ]
	r98 = qword [r97 + r25 * 8]
	r99 = r26 - 14
	r89 = r90 ^ qword [r98 + r99 * 8]
	r100 = qword [ chunks__ ]
	r101 = qword [r100 + r25 * 8]
	r102 = r26 - 16
	r88 = r89 ^ qword [r101 + r102 * 8]
		rdi = r88
		rsi = 1
		FuncCall rotate_left Param_size : 2
		r103 = rax
	qword [r87 + r26 * 8] = r103
Label_61:
	r104 = r26
	r26 = r26 + 1
	jump Label_64
Label_62:
	r105 = r76
	r106 = r78
	r107 = r80
	r108 = r81
	r109 = r83
	r26 = 0
Label_68:
	r110 = r26 < 80
	jump Label_67 if r110 je 1
	jump Label_66
Label_67:
	r113 = r26 < 20
	jump Label_70 if r113 je 1
	jump Label_71
Label_70:
	r115 = r106 & r107
	r117 = r106
	~ r117
	r116 = r117 & r108
	r114 = r115 | r116
	r111 = r114
	r112 = 1518500249
	jump Label_69
Label_71:
	r118 = r26 < 40
	jump Label_72 if r118 je 1
	jump Label_73
Label_72:
	r120 = r106 ^ r107
	r119 = r120 ^ r108
	r111 = r119
	r112 = 1859775393
	jump Label_69
Label_73:
	r121 = r26 < 60
	jump Label_74 if r121 je 1
	jump Label_75
Label_74:
	r124 = r106 & r107
	r125 = r106 & r108
	r123 = r124 | r125
	r126 = r107 & r108
	r122 = r123 | r126
	r111 = r122
		rdi = 48348
		rsi = 36635
		FuncCall lohi Param_size : 2
		r127 = rax
	r112 = r127
	jump Label_69
Label_75:
	r129 = r106 ^ r107
	r128 = r129 ^ r108
	r111 = r128
		rdi = 49622
		rsi = 51810
		FuncCall lohi Param_size : 2
		r130 = rax
	r112 = r130
Label_69:
		rdi = r105
		rsi = 5
		FuncCall rotate_left Param_size : 2
		r131 = rax
		rdi = r131
		rsi = r109
		FuncCall add Param_size : 2
		r132 = rax
		rdi = r111
		rsi = r112
		FuncCall add Param_size : 2
		r133 = rax
		rdi = r132
		rsi = r133
		FuncCall add Param_size : 2
		r134 = rax
	r135 = qword [ chunks__ ]
	r136 = qword [r135 + r25 * 8]
		rdi = r134
		rsi = qword [r136 + r26 * 8]
		FuncCall add Param_size : 2
		r137 = rax
	r138 = r137
	r109 = r108
	r108 = r107
		rdi = r106
		rsi = 30
		FuncCall rotate_left Param_size : 2
		r139 = rax
	r107 = r139
	r106 = r105
	r105 = r138
Label_65:
	r140 = r26
	r26 = r26 + 1
	jump Label_68
Label_66:
		rdi = r76
		rsi = r105
		FuncCall add Param_size : 2
		r141 = rax
	r76 = r141
		rdi = r78
		rsi = r106
		FuncCall add Param_size : 2
		r142 = rax
	r78 = r142
		rdi = r80
		rsi = r107
		FuncCall add Param_size : 2
		r143 = rax
	r80 = r143
		rdi = r81
		rsi = r108
		FuncCall add Param_size : 2
		r144 = rax
	r81 = r144
		rdi = r83
		rsi = r109
		FuncCall add Param_size : 2
		r145 = rax
	r83 = r145
Label_57:
	r146 = r25
	r25 = r25 + 1
	jump Label_60
Label_58:
	r147 = qword [ outputBuffer__ ]
	r148 = 0
	qword [r147 + r148 * 8] = r76
	r149 = qword [ outputBuffer__ ]
	r150 = 1
	qword [r149 + r150 * 8] = r78
	r151 = qword [ outputBuffer__ ]
	r152 = 2
	qword [r151 + r152 * 8] = r80
	r153 = qword [ outputBuffer__ ]
	r154 = 3
	qword [r153 + r154 * 8] = r81
	r155 = qword [ outputBuffer__ ]
	r156 = 4
	qword [r155 + r156 * 8] = r83
	rax = qword [ outputBuffer__ ]
	jump Label_41
Label_41:
computeSHA1 [Func]:
	r16 = rdi
	r17 = 0
Label_80:
		rdi = r16
		FuncCall string.length Param_size : 1
		r19 = rax
	r18 = r17 < r19
	jump Label_79 if r18 je 1
	jump Label_78
Label_79:
	r20 = qword [ inputBuffer__ ]
		rdi = r16
		rsi = r17
		FuncCall string.ord Param_size : 2
		r21 = rax
	qword [r20 + r17 * 8] = r21
Label_77:
	r22 = r17
	r17 = r17 + 1
	jump Label_80
Label_78:
		rdi = r16
		FuncCall string.length Param_size : 1
		r23 = rax
		rdi = qword [ inputBuffer__ ]
		rsi = r23
		FuncCall sha1 Param_size : 2
		r24 = rax
	r25 = r24
	r17 = 0
Label_84:
		rdi = r25
		FuncCall array.size Param_size : 1
		r27 = rax
	r26 = r17 < r27
	jump Label_83 if r26 je 1
	jump Label_82
Label_83:
		rdi = qword [r25 + r17 * 8]
		FuncCall toStringHex Param_size : 1
		r28 = rax
		rdi = r28
		FuncCall print Param_size : 1
		r29 = rax
Label_81:
	r30 = r17
	r17 = r17 + 1
	jump Label_84
Label_82:
		rdi = str__3
		FuncCall println Param_size : 1
		r31 = rax
Label_76:
nextLetter [Func]:
	r16 = rdi
	r17 = r16 == 122
	jump Label_87 if r17 je 1
	jump Label_88
Label_87:
	r18 = 1
	- r18
	rax = r18
	jump Label_85
	jump Label_86
Label_88:
Label_86:
	r19 = r16 == 90
	jump Label_90 if r19 je 1
	jump Label_91
Label_90:
	rax = 97
	jump Label_85
	jump Label_89
Label_91:
Label_89:
	r20 = r16 == 57
	jump Label_93 if r20 je 1
	jump Label_94
Label_93:
	rax = 65
	jump Label_85
	jump Label_92
Label_94:
Label_92:
	r21 = r16 + 1
	rax = r21
	jump Label_85
Label_85:
nextText [Func]:
	r16 = rdi
	r17 = rsi
	r19 = r17 - 1
	r18 = r19
Label_99:
	r20 = r18 >= 0
	jump Label_98 if r20 je 1
	jump Label_97
Label_98:
		rdi = qword [r16 + r18 * 8]
		FuncCall nextLetter Param_size : 1
		r21 = rax
	qword [r16 + r18 * 8] = r21
	r23 = 1
	- r23
	r22 = qword [r16 + r18 * 8] == r23
	jump Label_101 if r22 je 1
	jump Label_102
Label_101:
	qword [r16 + r18 * 8] = 48
	jump Label_100
Label_102:
	rax = 1
	jump Label_95
Label_100:
Label_96:
	r24 = r18
	r18 = r18 - 1
	jump Label_99
Label_97:
	rax = 0
	jump Label_95
Label_95:
array_equal [Func]:
	r16 = rdi
	r17 = rsi
		rdi = r16
		FuncCall array.size Param_size : 1
		r19 = rax
		rdi = r17
		FuncCall array.size Param_size : 1
		r20 = rax
	r18 = r19 != r20
	jump Label_105 if r18 je 1
	jump Label_106
Label_105:
	rax = 0
	jump Label_103
	jump Label_104
Label_106:
Label_104:
	r21 = 0
Label_110:
		rdi = r16
		FuncCall array.size Param_size : 1
		r23 = rax
	r22 = r21 < r23
	jump Label_109 if r22 je 1
	jump Label_108
Label_109:
	r24 = qword [r16 + r21 * 8] != qword [r17 + r21 * 8]
	jump Label_112 if r24 je 1
	jump Label_113
Label_112:
	rax = 0
	jump Label_103
	jump Label_111
Label_113:
Label_111:
Label_107:
	r25 = r21
	r21 = r21 + 1
	jump Label_110
Label_108:
	rax = 1
	jump Label_103
Label_103:
crackSHA1 [Func]:
	r16 = rdi
	r17 = 5
	r17 = r17 + 1
	r17 = r17 * 8
		rdi = r17
		FuncCall malloc Param_size : 1
		r18 = rax
	qword [r18] = 5
	r18 = r18 + 8
	r19 = r18
		rdi = r16
		FuncCall string.length Param_size : 1
		r21 = rax
	r20 = r21 != 40
	jump Label_116 if r20 je 1
	jump Label_117
Label_116:
		rdi = str__4
		FuncCall println Param_size : 1
		r22 = rax
	jump Label_114
	jump Label_115
Label_117:
Label_115:
	r23 = 0
Label_121:
	r24 = r23 < 5
	jump Label_120 if r24 je 1
	jump Label_119
Label_120:
	qword [r19 + r23 * 8] = 0
Label_118:
	r25 = r23
	r23 = r23 + 1
	jump Label_121
Label_119:
	r23 = 0
Label_125:
	r26 = r23 < 40
	jump Label_124 if r26 je 1
	jump Label_123
Label_124:
	r27 = r23 / 8
	r29 = r23 / 8
	r31 = r23 + 3
		rdi = r16
		rsi = r23
		rdx = r31
		FuncCall string.substring Param_size : 3
		r32 = rax
		rdi = r32
		FuncCall hex2int Param_size : 1
		r33 = rax
	r37 = r23 / 4
	r36 = r37 % 2
	r35 = 1 - r36
	r34 = r35 * 16
	r30 = r33 << r34
	r28 = qword [r19 + r29 * 8] | r30
	qword [r19 + r27 * 8] = r28
Label_122:
	r38 = r23 + 4
	r23 = r38
	jump Label_125
Label_123:
	r39 = 4
	r40 = 1
Label_129:
	r41 = r40 <= r39
	jump Label_128 if r41 je 1
	jump Label_127
Label_128:
	r23 = 0
Label_133:
	r42 = r23 < r40
	jump Label_132 if r42 je 1
	jump Label_131
Label_132:
	r43 = qword [ inputBuffer__ ]
	qword [r43 + r23 * 8] = 48
Label_130:
	r44 = r23
	r23 = r23 + 1
	jump Label_133
Label_131:
Label_137:
	jump Label_136 if 1 je 1
	jump Label_135
Label_136:
		rdi = qword [ inputBuffer__ ]
		rsi = r40
		FuncCall sha1 Param_size : 2
		r45 = rax
	r46 = r45
		rdi = r46
		rsi = r19
		FuncCall array_equal Param_size : 2
		r47 = rax
	jump Label_139 if r47 je 1
	jump Label_140
Label_139:
	r23 = 0
Label_144:
	r48 = r23 < r40
	jump Label_143 if r48 je 1
	jump Label_142
Label_143:
	r49 = qword [ inputBuffer__ ]
		rdi = qword [r49 + r23 * 8]
		FuncCall int2chr Param_size : 1
		r50 = rax
		rdi = r50
		FuncCall print Param_size : 1
		r51 = rax
Label_141:
	r52 = r23
	r23 = r23 + 1
	jump Label_144
Label_142:
		rdi = str__5
		FuncCall println Param_size : 1
		r53 = rax
	jump Label_114
	jump Label_138
Label_140:
Label_138:
		rdi = qword [ inputBuffer__ ]
		rsi = r40
		FuncCall nextText Param_size : 2
		r54 = rax
	r55 = r54
	! r55
	jump Label_146 if r55 je 1
	jump Label_147
Label_146:
	jump Label_135
	jump Label_145
Label_147:
Label_145:
Label_134:
	jump Label_137
Label_135:
Label_126:
	r56 = r40
	r40 = r40 + 1
	jump Label_129
Label_127:
		rdi = str__6
		FuncCall println Param_size : 1
		r57 = rax
Label_114:
main [Func]:
	qword [ asciiTable__ ] = str__7
	qword [ MAXCHUNK__ ] = 100
	r18 = qword [ MAXCHUNK__ ] - 1
	r17 = r18 * 64
	r16 = r17 - 16
	qword [ MAXLENGTH__ ] = r16
	r19 = qword [ MAXCHUNK__ ]
	r19 = r19 + 1
	r19 = r19 * 8
		rdi = r19
		FuncCall malloc Param_size : 1
		r20 = rax
	qword [r20] = qword [ MAXCHUNK__ ]
	r20 = r20 + 8
	r19 = qword [ MAXCHUNK__ ]
Label_149:
	r19 = r19 - 1
	r21 = 80
	r21 = r21 + 1
	r21 = r21 * 8
		rdi = r21
		FuncCall malloc Param_size : 1
		r22 = rax
	qword [r22] = 80
	r22 = r22 + 8
	qword [r20 + r19 * 8] = r22
	jump Label_149 if r19 jne 0
	qword [ chunks__ ] = r20
	r23 = qword [ MAXLENGTH__ ]
	r23 = r23 + 1
	r23 = r23 * 8
		rdi = r23
		FuncCall malloc Param_size : 1
		r24 = rax
	qword [r24] = qword [ MAXLENGTH__ ]
	r24 = r24 + 8
	qword [ inputBuffer__ ] = r24
	r25 = 5
	r25 = r25 + 1
	r25 = r25 * 8
		rdi = r25
		FuncCall malloc Param_size : 1
		r26 = rax
	qword [r26] = 5
	r26 = r26 + 8
	qword [ outputBuffer__ ] = r26
Label_153:
	jump Label_152 if 1 je 1
	jump Label_151
Label_152:
		FuncCall getInt Param_size : 0
		r29 = rax
	r27 = r29
	r30 = r27 == 0
	jump Label_155 if r30 je 1
	jump Label_156
Label_155:
	jump Label_151
	jump Label_154
Label_156:
Label_154:
	r31 = r27 == 1
	jump Label_158 if r31 je 1
	jump Label_159
Label_158:
		FuncCall getString Param_size : 0
		r32 = rax
	r28 = r32
		rdi = r28
		FuncCall computeSHA1 Param_size : 1
		r33 = rax
	jump Label_157
Label_159:
	r34 = r27 == 2
	jump Label_160 if r34 je 1
	jump Label_161
Label_160:
		FuncCall getString Param_size : 0
		r35 = rax
	r28 = r35
		rdi = r28
		FuncCall crackSHA1 Param_size : 1
		r36 = rax
	jump Label_157
Label_161:
Label_157:
Label_150:
	jump Label_153
Label_151:
	rax = 0
	jump Label_148
Label_148:
