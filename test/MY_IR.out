n [GV]
h [GV]
now [GV]
a [GV]
A [GV]
M [GV]
Q [GV]
R [GV]
seed [GV]

string[ 0 ]  
string[ 1 ] 
string[ 2 ] Sorry, the number n must be a number s.t. there exists i satisfying n=1+2+...+i
string[ 3 ] Let's start!
string[ 4 ] step 
string[ 5 ] :
string[ 6 ] Total: 
string[ 7 ]  step(s)

random [Func]:
	r18 = qword [ seed ] % qword [ Q ]
	r17 = qword [ A ] * r18
	r20 = qword [ seed ] / qword [ Q ]
	r19 = qword [ R ] * r20
	r16 = r17 - r19
	r21 = r16
	r22 = r21 >= 0
	jump Label_2 if r22 je 1
	jump Label_3
Label_2:
	qword [ seed ] = r21
	jump Label_1
Label_3:
	r23 = r21 + qword [ M ]
	qword [ seed ] = r23
Label_1:
	rax = qword [ seed ]
	jump Label_0
Label_0:
initialize [Func]:
	r16 = rdi
	qword [ seed ] = r16
Label_4:
swap [Func]:
	r16 = rdi
	r17 = rsi
	r18 = qword [ a ]
	r19 = qword [r18 + r16 * 8]
	r20 = qword [ a ]
	r21 = qword [ a ]
	qword [r20 + r16 * 8] = qword [r21 + r17 * 8]
	r22 = qword [ a ]
	qword [r22 + r17 * 8] = r19
Label_5:
pd [Func]:
	r16 = rdi
Label_10:
	r17 = qword [ h ] <= r16
	jump Label_9 if r17 je 1
	jump Label_8
Label_9:
	r21 = qword [ h ] + 1
	r20 = qword [ h ] * r21
	r19 = r20 / 2
	r18 = r16 == r19
	jump Label_12 if r18 je 1
	jump Label_13
Label_12:
	rax = 1
	jump Label_6
	jump Label_11
Label_13:
Label_11:
Label_7:
	qword [ h ] = qword [ h ] + 1
	jump Label_10
Label_8:
	rax = 0
	jump Label_6
Label_6:
show [Func]:
	r16 = 0
Label_18:
	r17 = r16 < qword [ now ]
	jump Label_17 if r17 je 1
	jump Label_16
Label_17:
	r20 = qword [ a ]
		rdi = qword [r20 + r16 * 8]
		FuncCall toString Param_size : 1
		r21 = rax
		rdi = r21
		rsi = str__0
		FuncCall string.add Param_size : 2
		r19 = rax
		rdi = r19
		FuncCall print Param_size : 1
		r22 = rax
Label_15:
	r16 = r16 + 1
	jump Label_18
Label_16:
		rdi = str__1
		FuncCall println Param_size : 1
		r23 = rax
Label_14:
win [Func]:
	r18 = 100
	r18 = r18 + 1
	r18 = r18 * 8
		rdi = r18
		FuncCall malloc Param_size : 1
		r19 = rax
	qword [r19] = 100
	r19 = r19 + 8
	r20 = r19
	r22 = qword [ now ] != qword [ h ]
	jump Label_21 if r22 je 1
	jump Label_22
Label_21:
	rax = 0
	jump Label_19
	jump Label_20
Label_22:
Label_20:
	r17 = 0
Label_26:
	r23 = r17 < qword [ now ]
	jump Label_25 if r23 je 1
	jump Label_24
Label_25:
	r24 = qword [ a ]
	qword [r20 + r17 * 8] = qword [r24 + r17 * 8]
Label_23:
	r17 = r17 + 1
	jump Label_26
Label_24:
	r16 = 0
Label_30:
	r26 = qword [ now ] - 1
	r25 = r16 < r26
	jump Label_29 if r25 je 1
	jump Label_28
Label_29:
	r27 = r16 + 1
	r17 = r27
Label_34:
	r28 = r17 < qword [ now ]
	jump Label_33 if r28 je 1
	jump Label_32
Label_33:
	r29 = qword [r20 + r16 * 8] > qword [r20 + r17 * 8]
	jump Label_36 if r29 je 1
	jump Label_37
Label_36:
	r21 = qword [r20 + r16 * 8]
	qword [r20 + r16 * 8] = qword [r20 + r17 * 8]
	qword [r20 + r17 * 8] = r21
	jump Label_35
Label_37:
Label_35:
Label_31:
	r17 = r17 + 1
	jump Label_34
Label_32:
Label_27:
	r16 = r16 + 1
	jump Label_30
Label_28:
	r16 = 0
Label_41:
	r30 = r16 < qword [ now ]
	jump Label_40 if r30 je 1
	jump Label_39
Label_40:
	r32 = r16 + 1
	r31 = qword [r20 + r16 * 8] != r32
	jump Label_43 if r31 je 1
	jump Label_44
Label_43:
	rax = 0
	jump Label_19
	jump Label_42
Label_44:
Label_42:
Label_38:
	r16 = r16 + 1
	jump Label_41
Label_39:
	rax = 1
	jump Label_19
Label_19:
merge [Func]:
	r16 = 0
Label_49:
	r17 = r16 < qword [ now ]
	jump Label_48 if r17 je 1
	jump Label_47
Label_48:
	r19 = qword [ a ]
	r18 = qword [r19 + r16 * 8] == 0
	jump Label_51 if r18 je 1
	jump Label_52
Label_51:
	r21 = r16 + 1
	r20 = r21
Label_56:
	r22 = r20 < qword [ now ]
	jump Label_55 if r22 je 1
	jump Label_54
Label_55:
	r24 = qword [ a ]
	r23 = qword [r24 + r20 * 8] != 0
	jump Label_58 if r23 je 1
	jump Label_59
Label_58:
		rdi = r16
		rsi = r20
		FuncCall swap Param_size : 2
		r25 = rax
	jump Label_54
	jump Label_57
Label_59:
Label_57:
Label_53:
	r20 = r20 + 1
	jump Label_56
Label_54:
	jump Label_50
Label_52:
Label_50:
Label_46:
	r16 = r16 + 1
	jump Label_49
Label_47:
	r16 = 0
Label_63:
	r26 = r16 < qword [ now ]
	jump Label_62 if r26 je 1
	jump Label_61
Label_62:
	r28 = qword [ a ]
	r27 = qword [r28 + r16 * 8] == 0
	jump Label_65 if r27 je 1
	jump Label_66
Label_65:
	qword [ now ] = r16
	jump Label_61
	jump Label_64
Label_66:
Label_64:
Label_60:
	r16 = r16 + 1
	jump Label_63
Label_61:
Label_45:
move [Func]:
	r16 = 0
Label_71:
	r17 = r16 < qword [ now ]
	jump Label_70 if r17 je 1
	jump Label_69
Label_70:
	r18 = qword [ a ]
	qword [r18 + r16 * 8] = qword [r18 + r16 * 8] - 1
	r19 = r16 + 1
	r16 = r19
Label_68:
	jump Label_71
Label_69:
	r20 = qword [ a ]
	r21 = qword [ now ]
	qword [r20 + r21 * 8] = qword [ now ]
	r22 = qword [ now ]
	qword [ now ] = qword [ now ] + 1
Label_67:
main [Func]:
	qword [ A ] = 48271
	qword [ M ] = 2147483647
	qword [ seed ] = 1
	r16 = 0
	r17 = 0
	r18 = 0
	r20 = 3 * 7
	r19 = r20 * 10
	qword [ n ] = r19
	qword [ h ] = 0
	r21 = 100
	r21 = r21 + 1
	r21 = r21 * 8
		rdi = r21
		FuncCall malloc Param_size : 1
		r22 = rax
	qword [r22] = 100
	r22 = r22 + 8
	qword [ a ] = r22
	r23 = qword [ M ] / qword [ A ]
	qword [ Q ] = r23
	r24 = qword [ M ] % qword [ A ]
	qword [ R ] = r24
		rdi = qword [ n ]
		FuncCall pd Param_size : 1
		r25 = rax
	r26 = r25
	! r26
	jump Label_74 if r26 je 1
	jump Label_75
Label_74:
		rdi = str__2
		FuncCall println Param_size : 1
		r27 = rax
	rax = 1
	jump Label_72
	jump Label_73
Label_75:
Label_73:
		rdi = str__3
		FuncCall println Param_size : 1
		r28 = rax
		rdi = 3654898
		FuncCall initialize Param_size : 1
		r29 = rax
		FuncCall random Param_size : 0
		r32 = rax
	r31 = r32 % 10
	r30 = r31 + 1
	qword [ now ] = r30
		rdi = qword [ now ]
		FuncCall toString Param_size : 1
		r33 = rax
		rdi = r33
		FuncCall println Param_size : 1
		r34 = rax
Label_79:
	r36 = qword [ now ] - 1
	r35 = r16 < r36
	jump Label_78 if r35 je 1
	jump Label_77
Label_78:
	r37 = qword [ a ]
		FuncCall random Param_size : 0
		r40 = rax
	r39 = r40 % 10
	r38 = r39 + 1
	qword [r37 + r16 * 8] = r38
Label_83:
	r43 = qword [ a ]
	r42 = qword [r43 + r16 * 8] + r17
	r41 = r42 > qword [ n ]
	jump Label_82 if r41 je 1
	jump Label_81
Label_82:
	r44 = qword [ a ]
		FuncCall random Param_size : 0
		r47 = rax
	r46 = r47 % 10
	r45 = r46 + 1
	qword [r44 + r16 * 8] = r45
Label_80:
	jump Label_83
Label_81:
	r49 = qword [ a ]
	r48 = r17 + qword [r49 + r16 * 8]
	r17 = r48
Label_76:
	r16 = r16 + 1
	jump Label_79
Label_77:
	r50 = qword [ a ]
	r51 = qword [ now ] - 1
	r52 = qword [ n ] - r17
	qword [r50 + r51 * 8] = r52
		FuncCall show Param_size : 0
		r53 = rax
		FuncCall merge Param_size : 0
		r54 = rax
Label_87:
		FuncCall win Param_size : 0
		r55 = rax
	r56 = r55
	! r56
	jump Label_86 if r56 je 1
	jump Label_85
Label_86:
	r18 = r18 + 1
		rdi = r18
		FuncCall toString Param_size : 1
		r61 = rax
		rdi = str__4
		rsi = r61
		FuncCall string.add Param_size : 2
		r60 = rax
		rdi = r60
		rsi = str__5
		FuncCall string.add Param_size : 2
		r58 = rax
		rdi = r58
		FuncCall println Param_size : 1
		r62 = rax
		FuncCall move Param_size : 0
		r63 = rax
		FuncCall merge Param_size : 0
		r64 = rax
		FuncCall show Param_size : 0
		r65 = rax
Label_84:
	jump Label_87
Label_85:
		rdi = r18
		FuncCall toString Param_size : 1
		r70 = rax
		rdi = str__6
		rsi = r70
		FuncCall string.add Param_size : 2
		r69 = rax
		rdi = r69
		rsi = str__7
		FuncCall string.add Param_size : 2
		r67 = rax
		rdi = r67
		FuncCall println Param_size : 1
		r71 = rax
	rax = 0
	jump Label_72
Label_72:
