global main

section .data

section .text
tak:
	push	rbp
	mov		rbp, rsp
	push	rbx
	push	r12
	push	r13
	push	r14
	push	r15
	sub		rbp, 40
	sub		rsp, 16
	mov		rbx, rdi
	mov		r10, rsi
	mov		r11, rdx
	mov		r12, rcx
	mov		r13, r8
	mov		r14, r9
	cmp		r10, rbx
	jl		_1_Label
	jmp		_2_Label
_1_Label:
	mov		rdx, rbx
	sub	rdx, 1
	mov		rdi, rdx
	push	r10
	push	r11
	push	rdi
	mov		r9, r14
	mov		r8, r13
	mov		rcx, r12
	mov		rdx, r11
	mov		rsi, r10
	mov		rdi, rdi
	call	tak
	pop		rdi
	pop		r11
	pop		r10
	mov		r15, rax
	mov		rdx, r10
	sub	rdx, 1
	mov		rdi, rdx
	push	r10
	push	r11
	push	rdi
	mov		r9, r14
	mov		r8, r13
	mov		rcx, r12
	mov		rdx, rbx
	mov		rsi, r11
	mov		rdi, rdi
	call	tak
	pop		rdi
	pop		r11
	pop		r10
	mov		qword [rbp - 8], rax
	mov		rdx, r11
	sub	rdx, 1
	mov		rdi, rdx
	push	r10
	push	r11
	push	rdi
	mov		r9, r14
	mov		r8, r13
	mov		rcx, r12
	mov		rdx, r10
	mov		rsi, rbx
	mov		rdi, rdi
	call	tak
	pop		rdi
	pop		r11
	pop		r10
	mov		rdi, rax
	push	r10
	push	r11
	push	rdi
	mov		r9, r14
	mov		r8, r13
	mov		rcx, r12
	mov		rdx, rdi
	mov		rsi, qword [rbp - 8]
	mov		rdi, r15
	call	tak
	pop		rdi
	pop		r11
	pop		r10
	mov		rdi, rax
	mov		rdx, 1
	add	rdx, rdi
	mov		rdi, rdx
	mov		rax, rdi
	jmp		_3_Label
_2_Label:
	mov		rax, r11
	jmp		_3_Label
_3_Label:
	add		rsp, 16
	add		rbp, 40
	pop		r15
	pop		r14
	pop		r13
	pop		r12
	pop		rbx
	mov		rsp, rbp
	pop		rbp
	ret	
main:
	push	rbp
	mov		rbp, rsp
	mov		r15, 18
	mov		r9, 0
	mov		r8, 0
	mov		rcx, 0
	mov		rdx, 6
	mov		rsi, 12
	mov		rdi, r15
	call	tak
	mov		r14, rax
	add		r15, 1
	mov		rax, 0
	jmp		_4_Label
_4_Label:
	mov		rsp, rbp
	pop		rbp
	ret	


;thanks for XZYY's inner-built function assembly code

section .data
intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%lld ",10,0
format3:
	db"%s",0
format4:
	db"%s",10,0

section .bss
stringbuffer:
	resb 256

extern scanf
extern printf
extern puts
extern strlen
extern memcpy
extern sscanf
extern sprintf
extern malloc
extern strcmp

section .text
getInt:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format1
	mov rsi,intbuffer
	call scanf
	mov rax,[intbuffer]
	mov rsp,rbp
	pop rbp
	ret

printInt:
	push rbp
	mov rbp,rsp
	mov rsi,rdi
	mov rax,0
	mov rdi,format2
	call printf
	mov rsp,rbp
	pop rbp
	ret

Array_size:
	mov rax,[rdi-8]
	ret

print:
	push rbp
	mov rbp,rsp
	mov rax,0
	mov rsi,rdi
	mov rdi,format3
	call printf
	mov rsp,rbp
	pop rbp
	ret

println:

	call puts
	ret


transtring:

	push rbp
	mov rbp,rsp
	call strlen
	push rdi
	mov rdi,rax
	push rdi
	add rdi,9
	call malloc
	pop rdi
	mov [rax],rdi
	add rax,8
	mov rdx,rdi
	add rdx,1
	mov rdi,rax
	pop rsi
	sub rsp,8
	push rax
	call memcpy
	pop rax
	mov rsp,rbp
	pop rbp
	ret

getString:

	push rbp
	mov rbp,rsp
	mov rax,0
	mov rdi,format3
	mov rsi,stringbuffer
	call scanf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

toString:

	push rbp
	mov rbp,rsp
	mov rdx,rdi
	mov rax,0
	mov rdi,stringbuffer
	mov rsi,format1
	call sprintf
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

String_length:

	mov rax,[rdi-8]
	ret

String_substring:

	push rbp
	mov rbp,rsp
	push rdi
	push rsi
	mov rdi,rdx
	sub rdi,rsi
	add rdi,1
	push rdi
	add rdi,9
	call malloc
	pop rdx
	mov [rax],rdx
	add rax,8
	pop rsi
	pop rdi
	add rsi,rdi
	mov rdi,rax
	push rdx
	push rax
	call memcpy
	pop rax
	pop rdx
	mov qword[rax+rdx],0
	mov rsp,rbp
	pop rbp
	ret

String_parseInt:

	mov rsi,format1
	mov rdx,intbuffer
	mov rax,0
	call sscanf
	mov rax,[intbuffer]
	ret

String_ord:

	mov rax,0
	mov al,byte[rdi+rsi]
	ret

String_add:

	push rbp
	mov rbp,rsp
	push rsi
	mov rsi,rdi
	mov rdi,stringbuffer
	mov rdx,[rsi-8]
	push rdx
	call memcpy
	pop rdi
	pop rsi
	add rdi,stringbuffer
	mov rdx,[rsi-8]
	add rdx,1
	call memcpy
	mov rdi,stringbuffer
	call transtring
	mov rsp,rbp
	pop rbp
	ret

String_lt:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setl dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_le:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setle dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_gt:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setg dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_ge:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setge dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_eq:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	sete dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret

String_ne:

	push rbp
	mov rbp,rsp
	call strcmp
	mov rdi,0
	cmp rax,0
	setne dil
	mov rax,rdi
	mov rsp,rbp
	pop rbp
	ret